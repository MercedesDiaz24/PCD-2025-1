import streamlit as st
import pandas as pd
import plotly.express as px
from streamlit_option_menu import option_menu

# ---------------------- CARGA DE DATOS ---------------------- #
@st.cache_data
def load_data():
    df = pd.read_csv("data/Catalogo_con_distritos.csv")
    df["A√ëO"] = df["FECHA_UTC"].astype(str).str[:4]
    fecha_dt = pd.to_datetime(df["FECHA_UTC"].astype(str), format="%Y%m%d", errors="coerce")
    df["FECHA"] = fecha_dt.dt.strftime("%d/%m/%Y")
    df["HORA"] = df["HORA_UTC"].astype(str).str.zfill(6).str[:2]  # extrae las 2 primeras cifras (horas)
    df["HORA"] = df["HORA"].astype(int)
    return df

df = load_data()

# ----------------------- MEN√ö LATERAL ----------------------- #
with st.sidebar:
    selected = option_menu(
        menu_title="üìà Plataforma de Monitoreo S√≠smico",
        options=["üìò Inicio", "üìä Dashboard"],
        default_index=0,
        styles={
            "container": {"padding": "10px", "background-color": "#1E1E1E"},
            "icon": {"color": "#ffffff", "font-size": "20px"},
            "nav-link": {
                "font-size": "16px",
                "text-align": "left",
                "margin": "0px",
                "color": "#ffffff"
            },
            "nav-link-selected": {
                "background-color": "#339af0",
                "color": "#ffffff",
                "font-weight": "bold",
                "border-radius": "8px"
            },
            "menu-title": {
                "font-size": "24px",
                "text-align": "center",
                "color": "#ffffff",
                "font-weight": "bold",
                "background-image": "none",
            }
        }
    )

# ------------------- PESTA√ëA: INICIO ------------------ #
if selected == "üìò Inicio": 
    st.title("üåç Plataforma de Monitoreo S√≠smico del Per√∫")
    st.markdown("""
    _Un recurso interactivo para la exploraci√≥n hist√≥rica y territorial de los eventos s√≠smicos en el pa√≠s._
    """)

    st.header("üßæ Descripci√≥n del conjunto de datos")
    st.markdown(f"""
    Este conjunto de datos contiene **{len(df):,} registros s√≠smicos** ocurridos en el Per√∫.

    - **Rango de fechas:** `{df["FECHA"].dropna().iloc[0]}` ‚Üí `{df["FECHA"].dropna().iloc[-1]}`
    - **Columnas clave:** `MAGNITUD`, `PROFUNDIDAD`, `LATITUD`, `LONGITUD`, `DEPARTAMENTO`, `PROVINCIA`, `DISTRITO`

    El dataset permite analizar la frecuencia, magnitud y distribuci√≥n geogr√°fica de los sismos ocurridos a lo largo de m√°s de 60 a√±os en el pa√≠s.
    """)

    st.subheader("üåã ¬øPor qu√© es importante estudiar los sismos en Per√∫?")
    st.markdown("""
    Per√∫ se encuentra ubicado en el **Cintur√≥n de Fuego del Pac√≠fico**, una zona altamente s√≠smica donde se produce el contacto entre la Placa de Nazca y la Placa Sudamericana.
    
    Los sismos son fen√≥menos naturales inevitables, pero su impacto puede reducirse mediante **conocimiento, prevenci√≥n y planificaci√≥n**.  
    El an√°lisis hist√≥rico de eventos s√≠smicos permite:

    - üìç Identificar **zonas de mayor recurrencia** y peligrosidad.
    - üö® Mejorar los **protocolos de alerta temprana y evacuaci√≥n**.
    - üèóÔ∏è Dise√±ar **infraestructura sismo-resistente** y desarrollo urbano seguro.
    - üìä Apoyar a investigadores, autoridades y comunidades en la **toma de decisiones basadas en datos**.

    Esta plataforma busca brindar acceso abierto y comprensible a informaci√≥n clave sobre la sismicidad nacional, con el fin de fomentar una **cultura de prevenci√≥n, investigaci√≥n y resiliencia** frente a los riesgos naturales.
    """)

    st.subheader("üìë Vista Preliminar del Conjunto de Datos")
    st.dataframe(df.iloc[:, :10].head(10))

    st.subheader("üìà Estad√≠sticas Generales")
    st.dataframe(
        df.describe().T.drop("FECHA_CORTE", axis=0).style.format("{:.0f}", na_rep="")
    )

    st.subheader("üîó Fuentes de Datos")
    st.markdown("""
    Este an√°lisis se basa en el cat√°logo s√≠smico oficial publicado por el **Instituto Geof√≠sico del Per√∫ (IGP)**, que contiene informaci√≥n detallada sobre los eventos s√≠smicos registrados desde 1960 hasta 2023.

    #### üìÅ Fuente del Dataset
    - **Cat√°logo S√≠smico 1960‚Äì2023 ‚Äì IGP**  
    [datosabiertos.gob.pe](https://datosabiertos.gob.pe/dataset/cat%C3%A1logo-s%C3%ADsmico-1960-2023-instituto-geof%C3%ADsico-del-per%C3%BA-igp)

    #### üìö Fuentes informativas y t√©cnicas
    La informaci√≥n contextual sobre la sismicidad y su impacto en el Per√∫ ha sido elaborada con base en fuentes oficiales:

    - üìå **Tect√≥nica del Per√∫ ‚Äì IGP**  
    [https://www.igp.gob.pe/](https://www.igp.gob.pe/)

    - üåç **Perfil de Riesgo de Desastres ‚Äì Per√∫ (UNDRR)**  
    [https://www.undrr.org/](https://www.undrr.org/)

    - üåê **USGS ‚Äì Terremotos: conceptos b√°sicos**  
    [https://earthquake.usgs.gov/learn/kids/eqscience.php](https://earthquake.usgs.gov/learn/kids/eqscience.php)
                
    #### üõ†Ô∏è Herramientas utilizadas
    - Visualizaci√≥n: **Streamlit** + **Plotly**
    - Procesamiento de datos: **Pandas**, **Python 3.12**
    """)

    st.subheader("üë®‚Äçüíª Elaborado por")

    st.markdown("""
    Esta plataforma fue desarrollada como una herramienta educativa e informativa de acceso abierto, 
    combinando t√©cnicas de ciencia de datos, visualizaci√≥n interactiva y fuentes oficiales del monitoreo s√≠smico en el Per√∫.

    **Desarrolladores:**  
    - **Mercedes D√≠az Pichiule**  
    Bachiller en Ingenier√≠a Inform√°tica ‚Äì Pontificia Universidad Cat√≥lica del Per√∫

    - **√Ångel Mayta Coaguila**  
    Ingeniero Civil - Universidad Nacional de San Agust√≠n

    - **Miguel Lescano Avalos**  
    Bachiller en Ingenier√≠a de Sistemas - Universidad Nacional de Ingenier√≠a

    - **Sun Ji S√°nchez**  
    Bachiller en Ingenier√≠a Inform√°tica ‚Äì Pontificia Universidad Cat√≥lica del Per√∫

    **Fecha de publicaci√≥n:** Abril 2025  
    **Ubicaci√≥n:** Lima, Per√∫
    """)

# ------------------- PESTA√ëA: DASHBOARD --------------------- #
elif selected == "üìä Dashboard":
    st.title("üìä Dashboard S√≠smico Interactivo")

    # Filtros
    st.sidebar.subheader("üéõÔ∏è Filtros")

    # Filtro de a√±o
    ano_min, ano_max = st.sidebar.slider("Filtrar por a√±o:", int(df["A√ëO"].min()), int(df["A√ëO"].max()), (2000, 2023))

    # Filtros de ubicaci√≥n
    col1a, col1b = st.sidebar.columns(2)
    with col1a:
        departamentos = sorted(df["DEPARTAMENTO"].dropna().unique())
        departamento_seleccionado = st.selectbox("Departamento", ["Todos"] + departamentos)
    with col1b:
        if departamento_seleccionado != "Todos":
            provincias = sorted(df[df["DEPARTAMENTO"] == departamento_seleccionado]["PROVINCIA"].dropna().unique())
        else:
            provincias = sorted(df["PROVINCIA"].dropna().unique())
        provincia_seleccionada = st.selectbox("Provincia", ["Todos"] + provincias)
    col2 = st.sidebar.container()
    with col2:
        if provincia_seleccionada != "Todos":
            distritos = sorted(df[df["PROVINCIA"] == provincia_seleccionada]["DISTRITO"].dropna().unique())
        elif departamento_seleccionado != "Todos":
            distritos = sorted(df[df["DEPARTAMENTO"] == departamento_seleccionado]["DISTRITO"].dropna().unique())
        else:
            distritos = sorted(df["DISTRITO"].dropna().unique())
        distrito_seleccionado = st.selectbox("Distrito", ["Todos"] + distritos)

    # Filtros de magnitud y profundidad
    col3a, col3b = st.sidebar.columns(2)
    with col3a:
        mag_min, mag_max = st.slider("Magnitud:", float(df["MAGNITUD"].min()), float(df["MAGNITUD"].max()), (5.0, 8.0))
    with col3b:
        prof_min, prof_max = st.slider("Profundidad (km):", int(df["PROFUNDIDAD"].min()), int(df["PROFUNDIDAD"].max()), (0, 600))

    # Aplicaci√≥n de filtros
    df_filtered = df[
        df["A√ëO"].astype(int).between(ano_min, ano_max) &
        df["MAGNITUD"].between(mag_min, mag_max) &
        df["PROFUNDIDAD"].between(prof_min, prof_max)
    ]
    if departamento_seleccionado != "Todos":
        df_filtered = df_filtered[df_filtered["DEPARTAMENTO"] == departamento_seleccionado]
    if provincia_seleccionada != "Todos":
        df_filtered = df_filtered[df_filtered["PROVINCIA"] == provincia_seleccionada]
    if distrito_seleccionado != "Todos":
        df_filtered = df_filtered[df_filtered["DISTRITO"] == distrito_seleccionado]

    # Indicadores
    col1, col2, col3, col4 = st.columns(4)

    col1.metric("Eventos", len(df_filtered))
    col2.metric("Magnitud M√°xima", df_filtered["MAGNITUD"].max())
    col3.metric("Magnitud Promedio", round(df_filtered["MAGNITUD"].mean(), 1)) 
    col4.metric("Profundidad Promedio (km)", round(df_filtered["PROFUNDIDAD"].mean(), 1))

    # Mapa de eventos s√≠smicos
    st.subheader("üó∫Ô∏è Mapa de Eventos S√≠smicos")
    fig_map = px.scatter_map(
        df_filtered,
        lat="LATITUD",
        lon="LONGITUD",
        color="MAGNITUD",
        size="MAGNITUD",
        size_max=6,
        zoom=4,
        hover_name="DEPARTAMENTO",
        template="plotly",
        hover_data=["PROFUNDIDAD", "FECHA"],
        color_continuous_scale=px.colors.sequential.Bluered,
    )
    st.plotly_chart(fig_map, use_container_width=True)

    # Crear las columnas para colocar los gr√°ficos lado a lado
    col1, col2 = st.columns(2)

    # Gr√°fico de l√≠nea de frecuencia de sismos por a√±o
    with col1:
        st.markdown("##### üìä Frecuencia de Sismos por A√±o")
        sismos_por_anio = df_filtered.groupby("A√ëO").size().reset_index(name="N√∫mero de Sismos")
        fig4 = px.bar(
            sismos_por_anio,
            x="A√ëO",
            y="N√∫mero de Sismos",
            labels={"A√ëO": "A√±o", "N√∫mero de Sismos": "N√∫mero de sismos"},
            color_discrete_sequence=["#9467bd"]
        )
        st.plotly_chart(fig4, use_container_width=True)
        max_year = sismos_por_anio.loc[sismos_por_anio["N√∫mero de Sismos"].idxmax(), "A√ëO"]
        st.info(f"El a√±o con m√°s sismos fue **{max_year}**.")

    # Gr√°fico de l√≠nea de promedio de magnitud por a√±o
    with col2:
        st.markdown("##### üìâ Promedio de Magnitud por A√±o")
        avg_mag_per_year = df_filtered.groupby("A√ëO")["MAGNITUD"].mean().reset_index()
        fig5 = px.line(
            avg_mag_per_year,
            x="A√ëO",
            y="MAGNITUD",
            labels={"A√ëO": "A√±o", "MAGNITUD": "Promedio de magnitud"},
            color_discrete_sequence=["#1f77b4"],
        )
        st.plotly_chart(fig5, use_container_width=True)
        max_mag_year = avg_mag_per_year.loc[avg_mag_per_year["MAGNITUD"].idxmax(), "A√ëO"]
        max_mag_value = round(avg_mag_per_year["MAGNITUD"].max(), 2)
        st.info(f"El a√±o con el mayor promedio de magnitud fue **{max_mag_year}** con **{max_mag_value}**.")

    # Boxplot de magnitud por departamento
    st.subheader("üì¶ Magnitudes de sismos a lo largo del Per√∫")
    fig6 = px.box(
        df_filtered,
        x="DEPARTAMENTO",
        y="MAGNITUD",
        labels={"DEPARTAMENTO": "Departamento", "MAGNITUD": "Magnitud"},
        color_discrete_sequence=px.colors.qualitative.Plotly
    )
    fig6.update_layout(xaxis_title="Departamento", yaxis_title="Magnitud")
    st.plotly_chart(fig6, use_container_width=True)
    dep_mayor_mag = df_filtered.groupby("DEPARTAMENTO")["MAGNITUD"].mean().idxmax()
    st.info(f"El departamento con mayor magnitud promedio es **{dep_mayor_mag}**.")

    # Gr√°fico de dispersi√≥n de magnitud vs profundidad
    st.subheader("üìâ Relaci√≥n entre Magnitud y Profundidad")
    fig2 = px.scatter(
        df_filtered, 
        x="MAGNITUD", 
        y="PROFUNDIDAD",
        labels={"MAGNITUD": "Magnitud", "PROFUNDIDAD": "Profundidad (km)", "FECHA": "Fecha", "DEPARTAMENTO": "Departamento"},
        color_discrete_sequence=["#1f77b4"],
        hover_data={
        "FECHA": True,        
        "DEPARTAMENTO": True, 
        "MAGNITUD": True,     
        "PROFUNDIDAD": True  
        }
    )
    st.plotly_chart(fig2)
    profundidad_media = round(df_filtered["PROFUNDIDAD"].mean(), 1)
    st.info(f"La profundidad promedio de los eventos analizados es de **{profundidad_media} km**.")

    # Histograma de frecuencia de sismos por hora del d√≠a
    st.subheader("‚è∞ Frecuencia de Sismos por Hora del D√≠a")
    df_hora = df_filtered["HORA"].value_counts().sort_index().reset_index()
    df_hora.columns = ["Hora del d√≠a", "Cantidad de sismos"]
    fig_hora = px.bar(
        df_hora,
        x="Hora del d√≠a",
        y="Cantidad de sismos",
        labels={"Hora del d√≠a": "Hora del d√≠a", "Cantidad de sismos": "Cantidad de sismos"},
        color_discrete_sequence=["#17becf"]
    )
    fig_hora.update_layout(bargap=0.1, xaxis=dict(dtick=1))
    st.plotly_chart(fig_hora, use_container_width=True)
    hora_mas_sismos = df_hora.loc[df_hora["Cantidad de sismos"].idxmax(), "Hora del d√≠a"]
    st.info(f"La hora con m√°s actividad s√≠smica fue alrededor de las **{hora_mas_sismos}:00 horas**.")